@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta name="keywords" content="OpenLayers" />
    <title>WMSImage</title>
    <link rel="stylesheet" href="https://openlayers.org/en/v4.6.5/css/ol.css" type="text/css">
    <script src="https://openlayers.org/en/v4.6.5/build/ol.js"></script>
    <style type="text/css">
        body, html {
            width: 100%;
            height: 100%;
            margin: 0;
            font-family: "Microsoft YaHei"
        }

        .map {
            width: 100%;
            height: 100%;
        }
    </style>
</head>
<body>
    <div id="map" class="map"></div>
    <script src="~/Scripts/jquery-1.10.2.min.js"></script>
    <script type="text/javascript">
        var params = {
            mapCenter: [104.3, 37.8],
            zoom: 5,
            w: 1001,
            h: 741,
            canvasAlpha: 0.8,//canvas图层透明度
            colors: ["#00E400", "#FFFF00", "#FF7E00", "#FF0000", "#99004C", "#7E0023"]
        };
        var gradient = [{
            value: 0,
            r: 125,
            g: 228,
            b: 125
        }, {
            value: 25,
            r: 0,
            g: 228,
            b: 0
        }, {
            value: 75,
            r: 255,
            g: 255,
            b: 0
        }, {
            value: 125,
            r: 255,
            g: 126,
            b: 0
        }, {
            value: 175,
            r: 255,
            g: 0,
            b: 0
        }, {
            value: 250,
            r: 153,
            g: 0,
            b: 76
        }, {
            value: 400,
            r: 126,
            g: 0,
            b: 35
        }, {
            value: 500,
            r: 108,
            g: 0,
            b: 8
        }];
        var projection4326 = ol.proj.get('EPSG:4326');
        var source;
        var map = new ol.Map({
            target: 'map',
            layers: [
                new ol.layer.Tile({
                    source: new ol.source.OSM()
                })
            ],
            view: new ol.View({
                center: ol.proj.fromLonLat(params.mapCenter),
                zoom: params.zoom
            })
        });
        var data = [], polygonData = [];
        var wi = (135.4 - 73.2) / (params.w - 1), hi = (53.8 - 17.8) / (params.h - 1);
        function getData(lng, lat) {
            var i = Math.floor((lng - 73.2) / wi);
            var j = Math.floor((lat - 17.8) / hi);
            return bilinearInterpolate((lng - 73.2) / wi - i, (lat - 17.8) / hi - j, data[i][j], data[i + 1][j], data[i][j + 1], data[i + 1][j + 1]);
        }

        function bilinearInterpolate(x, y, g00, g10, g01, g11) {
            var rx = (1 - x);
            var ry = (1 - y);
            var a = rx * ry, b = x * ry, c = rx * y, d = x * y;
            return g00 * a + g10 * b + g01 * c + g11 * d;
        }

        function isIn(lng, lat) {
            var i = Math.round((lng - 73.2) / wi);
            var j = Math.round((lat - 17.8) / hi);
            return polygonData[i][j];
        }
        var image = new Image();
        image.src = "/Content/2020062317.png";
        image.onload = function () {
            var canvas = document.createElement('canvas');
            canvas.width = params.w;
            canvas.height = params.h;
            var ctx = canvas.getContext("2d");
            ctx.drawImage(image, 0, 0, params.w, params.h);
            var imageData = ctx.getImageData(0, 0, params.w, params.h).data;
            for (var j = 0; j < params.h; j++) {
                for (var i = 0; i < params.w; i++) {
                    if (j == 0) {
                        data[i] = [];
                    }
                    var r = imageData[j * params.w * 4 + i * 4];
                    var g = imageData[j * params.w * 4 + i * 4 + 1];
                    data[i][j] = r * 256 + g;
                }
            }
            var source = new ol.source.ImageCanvas({
                canvasFunction: (extent, resolution, pixelRatio, size, projection) => {
                    console.time("update");
                    var canvas = document.createElement('canvas');
                    canvas.width = size[0];
                    canvas.height = size[1];
                    var ctx = canvas.getContext("2d");
                    ctx.globalAlpha = params.canvasAlpha;
                    var w = 3, m = 1;
                    for (var x = m; x < size[0]; x += w) {
                        for (var y = m; y < size[1]; y += w) {
                            var point = ol.proj.toLonLat([extent[0] + resolution * x, extent[3] - resolution * y]);
                            if (point[0] >= 73.2 && point[0] <= 135.4 && point[1] >= 17.8 && point[1] <= 53.8) {
                                if (polygonData.length == 0 || isIn(point[0], point[1])) {
                                    var z = getData(point[0], point[1]);
                                    // 按AQI渐变
                                    for (var k = 1, l = 0; k < gradient.length; l = k++) {
                                        if (z <= gradient[k].value) {
                                            var t = (gradient[k].value - z) / (gradient[k].value - gradient[l].value);
                                            r = gradient[k].r - Math.round(t * (gradient[k].r - gradient[l].r));
                                            g = gradient[k].g - Math.round(t * (gradient[k].g - gradient[l].g));
                                            b = gradient[k].b - Math.round(t * (gradient[k].b - gradient[l].b));
                                            break;
                                        }
                                    }
                                    ctx.fillStyle = 'rgb(' + r + ',' + g + ',' + b + ')';
                                    // 按等级
                                    //ctx.fillStyle = params.colors[Math.floor(z / 50)];

                                    ctx.fillRect(x - m, y - m, w, w);
                                }
                            }
                        }
                    }
                    console.timeEnd("update");
                    console.log(canvas.toDataURL());
                    return canvas;
                },
                ratio: 1
            });
            var layer = new ol.layer.Image({
                source: source,
                map: map,
                opacity: params.canvasAlpha
            });
            image.src = "/Content/polygonschina.png";
            image.onload = function () {
                ctx.drawImage(image, 0, 0, params.w, params.h);
                imageData = ctx.getImageData(0, 0, params.w, params.h).data;
                for (var j = 0; j < params.h; j++) {
                    for (var i = 0; i < params.w; i++) {
                        if (j == 0) {
                            polygonData[i] = [];
                        }
                        var r = imageData[j * params.w * 4 + i * 4];
                        polygonData[i][j] = r == 255;
                    }
                }
            }
        }
    </script>
</body>
</html>
