@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta name="keywords" content="OpenLayers" />
    <title>DrawGuangDongPolygons</title>
    <style type="text/css">
        body, html {
            width: 100%;
            height: 100%;
            margin: 0;
            font-family: "Microsoft YaHei"
        }
    </style>
</head>
<body>
    <canvas id="canvas1"></canvas>
    <canvas id="canvas2"></canvas>
    <script src="~/Scripts/jquery-1.10.2.min.js"></script>
    <script type="text/javascript">
        function pip(polygon, x, y) {
            var h, i, j, c = false, points;
            for (h = 0; h < polygon.length; h++) {
                points = polygon[h];
                for (i = 0, j = points.length - 1; i < points.length; j = i++) {
                    if (((points[i][1] > y) != (points[j][1] > y)) && (x < (points[j][0] - points[i][0]) * (y - points[i][1]) / (points[j][1] - points[i][1]) + points[i][0])) {
                        c = !c;
                    }
                }
            }
            return c;
        }
        var extent = [109.6325, 20.0609, 117.3561, 25.5158];
        var width = 1001;
        var resolution = (extent[2] - extent[0]) / (width - 1);
        var height = Math.round((extent[3] - extent[1]) / resolution) + 1;
        var canvas1 = document.getElementById('canvas1');
        canvas1.width = width;
        canvas1.height = height;
        var canvas2 = document.getElementById('canvas2');
        canvas2.width = width;
        canvas2.height = height;
        var ctx1 = canvas1.getContext("2d");
        var ctx2 = canvas2.getContext("2d");
        $.getJSON("/Scripts/guang_dong_geo.json", function (result) {
            var polygons = [];
            for (var h = 0; h < result.features.length; h++) {
                if (result.features[h].geometry.type == "MultiPolygon") {
                    var coordinates = result.features[h].geometry.coordinates;
                    for (var i = 0; i < coordinates.length; i++) {
                        polygons.push(coordinates[i]);
                    }
                } else {
                    polygons.push(result.features[h].geometry.coordinates);
                }
            }
            console.time("1");
            ctx1.fillStyle = 'rgb(255,0,0)';
            for (var i = 0; i < width; i++) {
                var lon = extent[0] + i * resolution;
                for (var j = 0; j < height; j++) {
                    var lat = extent[3] - j * resolution;
                    var isIn = false;
                    for (var k = 0; k < polygons.length; k++) {
                        if (pip(polygons[k], lon, lat)) {
                            isIn = true;
                            break;
                        }
                    }
                    if (isIn) {
                        ctx1.fillRect(i, j, 1, 1);
                    }
                }
            }
            console.timeEnd("1");
            console.time("2");
            ctx2.fillStyle = 'rgb(255,0,0)';
            for (var i = 0; i < polygons.length; i++) {
                var polygon = polygons[i];
                ctx2.globalCompositeOperation = "source-over";
                for (j = 0; j < polygon.length; j++) {
                    var points = polygon[j];
                    ctx2.beginPath();
                    ctx2.moveTo(Math.round((points[0][0] - extent[0]) / resolution), Math.round((extent[3] - points[0][1]) / resolution));
                    for (k = 1; k < points.length; k++) {
                        ctx2.lineTo(Math.round((points[k][0] - extent[0]) / resolution), Math.round((extent[3] - points[k][1]) / resolution));
                    }
                    ctx2.fill();
                    ctx2.globalCompositeOperation = "xor";
                }
            }
            console.timeEnd("2");
            var loni = 180, lona = 0, lati = 90, lata = 0;
            for (var i = 0; i < polygons.length; i++) {
                var polygon = polygons[i];
                for (j = 0; j < polygon.length; j++) {
                    var points = polygon[j];
                    for (k = 0; k < points.length; k++) {
                        if (loni > points[k][0]) {
                            loni = points[k][0];
                        }
                        if (lona < points[k][0]) {
                            lona = points[k][0];
                        }
                        if (lati > points[k][1]) {
                            lati = points[k][1];
                        }
                        if (lata < points[k][1]) {
                            lata = points[k][1];
                        }
                    }
                }
            }
            console.log(loni);
            console.log(lati);
            console.log(lona);
            console.log(lata);
        });
    </script>
</body>
</html>
